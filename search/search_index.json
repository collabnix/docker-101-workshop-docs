{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docker 101 Workshop","text":"<p>Welcome to the Docker 101 Workshop! This workshop will guide you through the process of containerizing a CRUD web application that allows users to add, update, and delete \"students\" in a PostgreSQL database. Students have a name and belong to one of four houses: Gryffindor, Slytherin, Hufflepuff, or Ravenclaw.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Backend: Java 17, Spring Boot, Maven, PostgreSQL</li> <li>Frontend: Angular, Bootstrap</li> <li>Containerization: Docker, Docker Compose</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li><code>backend-springboot/</code>: Java Spring Boot backend API</li> <li><code>frontend-angular/</code>: Angular frontend application</li> </ul>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>GET /api/students</code>: Get all students</li> <li><code>GET /api/students/{id}</code>: Get a student by ID</li> <li><code>POST /api/students</code>: Create a new student</li> <li><code>PUT /api/students/{id}</code>: Update a student</li> <li><code>DELETE /api/students/{id}</code>: Delete a student</li> </ul>"},{"location":"#workshop-overview","title":"Workshop Overview","text":"<p>This workshop is divided into four main sections:</p> <ol> <li>Build: Learn how to containerize Spring Boot, Angular, and PostgreSQL applications</li> <li>Test: Run, troubleshoot, and test containerized applications</li> <li>Deploy: Deploy containers to Kubernetes</li> <li>CDE: Set up a Container Development Environment</li> </ol>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>Docker Desktop</li> <li>Basic knowledge of:</li> <li>Java/Maven</li> <li>Node.js/Angular</li> <li>Docker concepts</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Clone the repository and follow along with the instructions in each section:</p> <pre><code>git clone https://github.com/collabnix/docker-101-workshop.git\ncd docker-101-workshop\n</code></pre> <p>Each section contains detailed instructions, exercises, and solutions to help you learn Docker and containerization principles with practical examples.</p>"},{"location":"agenda/","title":"Docker Workshop","text":""},{"location":"agenda/#build-run-deploy-a-full-stack-app-with-spring-boot-angularjs-and-postgresql","title":"Build, Run, Deploy: a Full-Stack App with Spring Boot, AngularJS, and PostgreSQL","text":""},{"location":"agenda/#workshop-description","title":"Workshop Description:","text":"<p>In this hands-on, in-person workshop, developers will gain practical experience building, running, testing, and deploying a full-stack containerized application. Participants will work with a real-world example that combines a Spring Boot API backend, an AngularJS frontend, and a PostgreSQL database, all orchestrated using Docker.</p> <p>By the end of the session, developers will walk away with a clear understanding of how to: ?   Containerize backend, frontend, and database services ?   Run everything together using Docker Compose ?   Troubleshoot the application locally and prepare it for cloud deployment</p> <p>This workshop is ideal for developers with some experience in Java or frontend development who are looking to sharpen their DevOps and containerization skills.</p>"},{"location":"agenda/#technology-stack","title":"Technology Stack:","text":"<p>Required * Git * Docker Desktop</p> <p>Languages * Java 17 / Maven     * Spring Boot 3.2 * Node.js 20     * Angular 18 * PostgreSQL 14</p> <p>Workshop Agenda:</p> <p>? Duration: 4.5 hours with breaks</p> <p>? 9:30 AM ? 10:00 AM</p> <p>Welcome &amp; Setup</p> <ul> <li>Introductions</li> <li>Workshop goals</li> <li>Checking prerequisites (Docker, Docker Compose, Git, Java, Node.js)</li> <li>Clone starter project and verify environment</li> </ul> <p>? 10:00 AM - 10:45 AM</p> <p>Part 1: Backend Containerization (Spring Boot + PostgreSQL)</p> <p>?   Overview of Spring Boot and PostgreSQL integration</p> <p>?   Dockerfile for Spring Boot</p> <p>?   Writing a docker-compose.yml to include Postgres</p> <p>?   Connecting backend to database using environment variables</p> <p>? Hands-on Exercise: Run Spring Boot with a containerized Postgres instance</p> <p>? Break (15 mins)</p> <p>? 11:00 AM ? 12:00 PM</p> <p>Part 2: Frontend Containerization (AngularJS)</p> <p>?   Overview of AngularJS application structure</p> <p>?   Creating a Dockerfile for a static site using NGINX</p> <p>?   Proxying API requests to backend</p> <p>? Hands-on Exercise: Build and run frontend and backend together using Docker Compose</p> <p>? Lunch (1 hour)</p> <p>? 1:00 PM ? 1:45 PM</p> <p>Part 3: Running and Troubleshooting</p> <p>?   Run all services together</p> <p>?   Troubleshooting container networking, logs, and errors</p> <p>?   Health checks and startup dependencies</p> <p>?   Database seeding/migrations for test environments</p> <p>?   Using Docker volumes for persistent data (optional)</p> <p>? Hands-on Exercise: Run backend and frontend together using <code>docker compose</code></p> <p>? Break (15 mins)</p> <p>? 2:00 PM ? 2:45 PM</p> <p>Part 4: Deployment</p> <ul> <li>Kubernetes / KinD overview</li> <li>Manifests</li> <li>Docker compose bridge</li> </ul> <p>? Hands-on Exercise: Deploy the application to KinD</p> <p>? 2:45 PM ? 3:00 PM</p> <p>Wrap-Up &amp; Q&amp;A</p> <ul> <li>Recap</li> <li>New Docker features (optional)</li> <li>Q&amp;A</li> </ul>"},{"location":"build/","title":"Build: Containerizing Your Application","text":"<p>In this section, you'll learn how to containerize a full-stack application consisting of:</p> <ul> <li>A Spring Boot backend with RESTful APIs</li> <li>An Angular frontend</li> <li>A PostgreSQL database</li> </ul>"},{"location":"build/#objectives","title":"Objectives","text":"<p>By the end of this section, you will be able to:</p> <ol> <li>Create a Dockerfile for a Spring Boot application</li> <li>Create a Dockerfile for an Angular application</li> <li>Create a <code>docker-compose.yml</code> file to run all services together</li> <li>Configure proper networking between containers</li> <li>Use environment variables for configuration</li> </ol>"},{"location":"build/#project-overview","title":"Project Overview","text":"<p>The application is a simple CRUD app that manages students. Each student belongs to one of four houses: Gryffindor, Slytherin, Hufflepuff, or Ravenclaw.</p>"},{"location":"build/#backend-spring-boot","title":"Backend (Spring Boot)","text":"<p>The backend is a Java 17 Spring Boot application that provides RESTful APIs for performing CRUD operations on the students database.</p>"},{"location":"build/#frontend-angular","title":"Frontend (Angular)","text":"<p>The frontend is an Angular application that provides a user interface for interacting with the backend APIs.</p>"},{"location":"build/#database-postgresql","title":"Database (PostgreSQL)","text":"<p>The application uses PostgreSQL as its database. The database schema includes a <code>students</code> table with fields for a student's name, house, and other attributes.</p>"},{"location":"build/#getting-started","title":"Getting Started","text":"<p>Navigate to the <code>1-build</code> directory to begin:</p> <pre><code>cd 1-build\n</code></pre> <p>The directory contains the following:</p> <ul> <li><code>backend-springboot/</code>: The Spring Boot application</li> <li><code>frontend-angular/</code>: The Angular application</li> <li><code>solution/</code>: Complete solution with Dockerfiles and docker-compose.yml</li> </ul> <p>Follow the instructions in the next sections to containerize each part of the application.</p>"}]}